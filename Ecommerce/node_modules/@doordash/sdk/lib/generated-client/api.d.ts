/**
 * Drive API
 * Last updated: April 25, 2023  ### Release Notes  ### 2.0.1 2023/04/25 - Removed URL Markdown in patterns (not supported)  - Updated numerous descriptions  ### 2.0.0 2023/04/25 - Updated numerous descriptions - Reset version to 2.0.0  ### 0.3.3 2023/04/21 - Remove currency field from quote, create and update delivery request in Drive v2  ### 0.3.2 2023/04/12 - Support barcode in Drive v2   ### 0.3.1 2023/04/11 - Updated numerous descriptions   ### 0.3.0 2023/3/02 - Support fee and tax breakdown in Drive v2  ### 0.2.6 2023/1/20 - Support cash on delivery in Drive v2  ### 0.2.5 2023/1/10 - Support promotion ids in Drive v2  ### 0.2.4 2022/10/12 - Support items   ### 0.2.3 2022/10/12 - Support dasher allowed vehicles   ### 0.2.2 2022/08/15 - Support alcohol delivery in drive v2  ### 0.2.1 2022/06/06 - Adding pickup external store and external business ID  ### 0.2.0 2022/04/11 - Support returnable delivery  ### 0.1.4 2022/04/05 - Add dropoff contact given name - Add dropoff contact family name - Add dropoff contact send sms notifications  ### 0.1.3 2022/04/05 - Add pickup verification image url - Add dropoff verification image url  ### 0.1.2 2022/01/27 - Properly marking all required fields  ### 0.1.1 2022/01/13 - Updated contactless flag name - Added parameters to support scheduled deliveries - remove scheduling model  ### 0.0.15 2021/12/07 - addded locale  ### 0.0.14 12/03/2021 - Added driver_reference_tag  ### 0.0.13 (internal release) 2021/11/24 - Added contactless flag - Added tip support - Updated cancellation failure reasons  ### 0.0.12 (internal release) 2021/11/09 - removed tracking url/support reference from input - addded explicit \"delivery outputs\" class  ### 0.0.11 (internal release) 2021/11/05 - added authorization errors  ### 0.0.10 (internal release) 2021/11/01 - external ID is no longer UUID - add support ID to delivery response - add tracking URL for delivery tracking  ### 0.0.9 (internal release) 2021/10/18 - move scheduling_model into it\'s own subtype  ### 0.0.8 (internal release) 2021/10/16 - converted all operations models into types with `allOf` to mixin values - converted all operations parameters to types  ### 0.0.7 (internal release) 2021/10/15 - removed _cents suffix for i18n coolness - removed dropoff/pickup locations from all APIs for now - All addresses are just one string, not nested - Created UUID type - Added optional pickup_business_name/dropoff_business_name  ### 0.0.6 (internal release) 2021/10/14 - rename estimates to quote - add accept quote endpoint - match create and quote input and response  ### 0.0.5 (internal release) 2021/10/12 - order_value_cents is now optional - removed tips - switch to full addresses instead of address_map {city, zipcode etc) - addded optional place name to address field  ### 0.0.4 (internal release) 2021/10/04 - update the estimate & create to have consistent input  ### 0.0.3 (internal release) - combined pickup / dropoff details into Objective type - added optional Location to pickup/dropoff - added new SchedulingModel type (ASAP only for now) to explicitly set scheduling logic  ### 0.0.2 (internal release) - updated statuses logic and enums  ### 0.0.1 (internal release) - initial version
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * What the Dasher should do if the delivery is undeliverable. The default is \"dispose\". See [Create return to pickup deliveries](https://developer.doordash.com/en-US/docs/drive/how_to/return_to_pickup/) for more information.
 * @export
 * @enum {string}
 */
export declare const ActionIfUndeliverable: {
    readonly ReturnToPickup: "return_to_pickup";
    readonly Dispose: "dispose";
};
export type ActionIfUndeliverable = typeof ActionIfUndeliverable[keyof typeof ActionIfUndeliverable];
/**
 * Authorization error: the credentials provided with the request don\'t work for the requested operation
 * @export
 * @interface AuthorizationError
 */
export interface AuthorizationError {
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    'code': AuthorizationErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    'message': string;
}
export declare const AuthorizationErrorCodeEnum: {
    readonly AuthorizationError: "authorization_error";
};
export type AuthorizationErrorCodeEnum = typeof AuthorizationErrorCodeEnum[keyof typeof AuthorizationErrorCodeEnum];
/**
 *
 * @export
 * @interface CancelNotAllowedError
 */
export interface CancelNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'code': CancelNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'reason': CancelNotAllowedErrorReasonEnum;
}
export declare const CancelNotAllowedErrorCodeEnum: {
    readonly CancelNotAllowed: "cancel_not_allowed";
};
export type CancelNotAllowedErrorCodeEnum = typeof CancelNotAllowedErrorCodeEnum[keyof typeof CancelNotAllowedErrorCodeEnum];
export declare const CancelNotAllowedErrorReasonEnum: {
    readonly DeliveryAbandoned: "delivery_abandoned";
    readonly DeliveryCancelled: "delivery_cancelled";
    readonly DeliveryCompleted: "delivery_completed";
    readonly DeliveryCreationInProgress: "delivery_creation_in_progress";
    readonly DeliveryPickedUp: "delivery_picked_up";
    readonly CancellationWindowClosed: "cancellation_window_closed";
    readonly DuplicateRequest: "duplicate_request";
};
export type CancelNotAllowedErrorReasonEnum = typeof CancelNotAllowedErrorReasonEnum[keyof typeof CancelNotAllowedErrorReasonEnum];
/**
 *
 * @export
 * @interface CreateDeliveryInput
 */
export interface CreateDeliveryInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof CreateDeliveryInput
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_address': string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof CreateDeliveryInput
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_phone_number': string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'order_value'?: number;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof CreateDeliveryInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    'dropoff_window'?: TimeWindow;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof CreateDeliveryInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof CreateDeliveryInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof CreateDeliveryInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'dropoff_cash_on_delivery'?: number;
}
/**
 * Details about the Dasher assigned to this delivery. Details will be provided once a Dasher has been assigned and has accepted the delivery.
 * @export
 * @interface DasherDetails
 */
export interface DasherDetails {
    /**
     * Unique identifier for the Dasher.
     * @type {number}
     * @memberof DasherDetails
     */
    'dasher_id'?: number;
    /**
     * First name and last initial of the Dasher delivering the order.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_name'?: string;
    /**
     * Phone number for the Dasher; can only be called from dropoff_phone_number. Should include the country code.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_dropoff_phone_number'?: string;
    /**
     * Phone number for the Dasher; can only be called from pickup_phone_number. Should include the country code.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_pickup_phone_number'?: string;
    /**
     *
     * @type {Location}
     * @memberof DasherDetails
     */
    'dasher_location'?: Location;
    /**
     * Make of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_make'?: string;
    /**
     * Model of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_model'?: string;
    /**
     * Year of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_year'?: string;
}
/**
 * Enum to specify vehicle type.
 * @export
 * @enum {string}
 */
export declare const DasherVehicleType: {
    readonly Car: "car";
    readonly Bicycle: "bicycle";
    readonly Walking: "walking";
};
export type DasherVehicleType = typeof DasherVehicleType[keyof typeof DasherVehicleType];
/**
 * Delivery status and details.
 * @export
 * @interface DeliveryBase
 */
export interface DeliveryBase {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryBase
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof DeliveryBase
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof DeliveryBase
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
}
/**
 * Delivery drop off details.
 * @export
 * @interface DeliveryDropoffDetails
 */
export interface DeliveryDropoffDetails {
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_send_notifications'?: boolean;
}
/**
 * Delivery input only options ID.
 * @export
 * @interface DeliveryInputOnlyOptions
 */
export interface DeliveryInputOnlyOptions {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    'dropoff_window'?: TimeWindow;
}
/**
 * Details about an individual item in the order.
 * @export
 * @interface DeliveryItem
 */
export interface DeliveryItem {
    /**
     * Name of the item being delivered.
     * @type {string}
     * @memberof DeliveryItem
     */
    'name': string;
    /**
     * Description of the item being delivered.
     * @type {string}
     * @memberof DeliveryItem
     */
    'description'?: string;
    /**
     * Quantity of the item being delivered.
     * @type {number}
     * @memberof DeliveryItem
     */
    'quantity': number;
    /**
     * Unique ID generated by the caller for the item.
     * @type {string}
     * @memberof DeliveryItem
     */
    'external_id'?: string;
    /**
     * Unit volume of 1 instance of this item, in cubic feet, with or without a decimal point. The overall volume of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'volume'?: number;
    /**
     * Unit weight of 1 instance of this item, in pounds (lbs), with or without a decimal point. The overall weight of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'weight'?: number;
    /**
     * Unit price of 1 instance of this item in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599. The overall price of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'price'?: number;
    /**
     * Barcode identifying the item. This value must be in one of the following formats: Data Matrix, AZTEC, Code 128, Code 39, Code 93, CODABAR, EAN 13, EAN 8, ITF, UPC A, UPC E, PDF417. Not updatable.
     * @type {string}
     * @memberof DeliveryItem
     */
    'barcode'?: string;
}
/**
 * Details about the individual items included in the order.
 * @export
 * @interface DeliveryItemsDetails
 */
export interface DeliveryItemsDetails {
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryItemsDetails
     */
    'items'?: Array<DeliveryItem>;
}
/**
 * Delivery options ID.
 * @export
 * @interface DeliveryOptions
 */
export interface DeliveryOptions {
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof DeliveryOptions
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryOptions
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryOptions
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryOptions
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryOptions
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof DeliveryOptions
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryOptions
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof DeliveryOptions
     */
    'dropoff_cash_on_delivery'?: number;
}
/**
 * Delivery status and details provided by Doordash.
 * @export
 * @interface DeliveryOutput
 */
export interface DeliveryOutput {
    /**
     * See the [delivery statuses](https://developer.doordash.com/en-US/docs/drive/reference/delivery_statuses) document for detailed descriptions of each status.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'delivery_status'?: DeliveryOutputDeliveryStatusEnum;
    /**
     * The reason why a delivery was cancelled.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'cancellation_reason'?: DeliveryOutputCancellationReasonEnum;
    /**
     * Time when the delivery info was updated in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'updated_at'?: string;
    /**
     * Estimated time of pickup in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_time_estimated'?: string;
    /**
     * Actual time of pickup in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_time_actual'?: string;
    /**
     * Estimated time of drop off in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_time_estimated'?: string;
    /**
     * Actual time of drop off in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_time_actual'?: string;
    /**
     * Estimated time of return in ISO-8601 format; null if delivery is not returnable or already returned.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_time_estimated'?: string;
    /**
     * Actual time of return in ISO-8601 format; null if return is not returnable or the return is not yet completed.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_time_actual'?: string;
    /**
     * If a delivery is being returned-to-pickup, this is the address where the delivery will be returned.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_address'?: string;
    /**
     * Delivery Fee in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryOutput
     */
    'fee'?: number;
    /**
     * The charges that were applied for this delivery; sums to `fee`
     * @type {Array<FeeComponent>}
     * @memberof DeliveryOutput
     */
    'fee_components'?: Array<FeeComponent>;
    /**
     * Delivery tax in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryOutput
     */
    'tax'?: number;
    /**
     * The taxes that were applied for this delivery; sums to `tax`. Only returned for deliveries in Canada.
     * @type {Array<TaxComponent>}
     * @memberof DeliveryOutput
     */
    'tax_components'?: Array<TaxComponent>;
    /**
     * Internal reference for this delivery; reference it when talking or writing to DoorDash support.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'support_reference'?: string;
    /**
     * Tracking page for the delivery that you can use or share with the sender and/or receiver of the delivery. Note: the URL format is not fixed and may change over time.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'tracking_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was dropped off.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_verification_image_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_verification_image_url'?: string;
    /**
     * Link to a picture of the dropoff contact\'s signature that was collected by the Dasher during drop off.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_signature_image_url'?: string;
}
export declare const DeliveryOutputDeliveryStatusEnum: {
    readonly Quote: "quote";
    readonly Created: "created";
    readonly Confirmed: "confirmed";
    readonly EnrouteToPickup: "enroute_to_pickup";
    readonly ArrivedAtPickup: "arrived_at_pickup";
    readonly PickedUp: "picked_up";
    readonly EnrouteToDropoff: "enroute_to_dropoff";
    readonly ArrivedAtDropoff: "arrived_at_dropoff";
    readonly Delivered: "delivered";
    readonly EnrouteToReturn: "enroute_to_return";
    readonly ArrivedAtReturn: "arrived_at_return";
    readonly Returned: "returned";
    readonly Cancelled: "cancelled";
};
export type DeliveryOutputDeliveryStatusEnum = typeof DeliveryOutputDeliveryStatusEnum[keyof typeof DeliveryOutputDeliveryStatusEnum];
export declare const DeliveryOutputCancellationReasonEnum: {
    readonly CancelledByCreator: "cancelled_by_creator";
    readonly FailedToProcessPayment: "failed_to_process_payment";
    readonly FailedToAssignAndRefunded: "failed_to_assign_and_refunded";
    readonly FailedToPickup: "failed_to_pickup";
    readonly FailedToDeliver: "failed_to_deliver";
    readonly FailedToReturn: "failed_to_return";
};
export type DeliveryOutputCancellationReasonEnum = typeof DeliveryOutputCancellationReasonEnum[keyof typeof DeliveryOutputCancellationReasonEnum];
/**
 * Delivery pickup details.
 * @export
 * @interface DeliveryPickupDetails
 */
export interface DeliveryPickupDetails {
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_external_store_id'?: string;
}
/**
 * Request body for quote accept endpoint
 * @export
 * @interface DeliveryQuoteAcceptInput
 */
export interface DeliveryQuoteAcceptInput {
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryQuoteAcceptInput
     */
    'tip'?: number;
}
/**
 * Request body for quote endpoint
 * @export
 * @interface DeliveryQuoteInput
 */
export interface DeliveryQuoteInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof DeliveryQuoteInput
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_address': string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_phone_number': string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'order_value'?: number;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryQuoteInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_window'?: TimeWindow;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryQuoteInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryQuoteInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryQuoteInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_cash_on_delivery'?: number;
}
/**
 * Delivery status and details.
 * @export
 * @interface DeliveryResponse
 */
export interface DeliveryResponse {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof DeliveryResponse
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof DeliveryResponse
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryResponse
     */
    'currency': string;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryResponse
     */
    'items'?: Array<DeliveryItem>;
    /**
     * See the [delivery statuses](https://developer.doordash.com/en-US/docs/drive/reference/delivery_statuses) document for detailed descriptions of each status.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'delivery_status': DeliveryResponseDeliveryStatusEnum;
    /**
     * The reason why a delivery was cancelled.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'cancellation_reason'?: DeliveryResponseCancellationReasonEnum;
    /**
     * Time when the delivery info was updated in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'updated_at'?: string;
    /**
     * Estimated time of pickup in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_time_estimated'?: string;
    /**
     * Actual time of pickup in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_time_actual'?: string;
    /**
     * Estimated time of drop off in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_time_estimated'?: string;
    /**
     * Actual time of drop off in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_time_actual'?: string;
    /**
     * Estimated time of return in ISO-8601 format; null if delivery is not returnable or already returned.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_time_estimated'?: string;
    /**
     * Actual time of return in ISO-8601 format; null if return is not returnable or the return is not yet completed.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_time_actual'?: string;
    /**
     * If a delivery is being returned-to-pickup, this is the address where the delivery will be returned.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_address'?: string;
    /**
     * Delivery Fee in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'fee': number;
    /**
     * The charges that were applied for this delivery; sums to `fee`
     * @type {Array<FeeComponent>}
     * @memberof DeliveryResponse
     */
    'fee_components'?: Array<FeeComponent>;
    /**
     * Delivery tax in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'tax'?: number;
    /**
     * The taxes that were applied for this delivery; sums to `tax`. Only returned for deliveries in Canada.
     * @type {Array<TaxComponent>}
     * @memberof DeliveryResponse
     */
    'tax_components'?: Array<TaxComponent>;
    /**
     * Internal reference for this delivery; reference it when talking or writing to DoorDash support.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'support_reference'?: string;
    /**
     * Tracking page for the delivery that you can use or share with the sender and/or receiver of the delivery. Note: the URL format is not fixed and may change over time.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'tracking_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was dropped off.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_verification_image_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_verification_image_url'?: string;
    /**
     * Link to a picture of the dropoff contact\'s signature that was collected by the Dasher during drop off.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_signature_image_url'?: string;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryResponse
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryResponse
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryResponse
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryResponse
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof DeliveryResponse
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     * Unique identifier for the Dasher.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'dasher_id'?: number;
    /**
     * First name and last initial of the Dasher delivering the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_name'?: string;
    /**
     * Phone number for the Dasher; can only be called from dropoff_phone_number. Should include the country code.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_dropoff_phone_number'?: string;
    /**
     * Phone number for the Dasher; can only be called from pickup_phone_number. Should include the country code.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_pickup_phone_number'?: string;
    /**
     *
     * @type {Location}
     * @memberof DeliveryResponse
     */
    'dasher_location'?: Location;
    /**
     * Make of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_make'?: string;
    /**
     * Model of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_model'?: string;
    /**
     * Year of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_year'?: string;
}
export declare const DeliveryResponseDeliveryStatusEnum: {
    readonly Quote: "quote";
    readonly Created: "created";
    readonly Confirmed: "confirmed";
    readonly EnrouteToPickup: "enroute_to_pickup";
    readonly ArrivedAtPickup: "arrived_at_pickup";
    readonly PickedUp: "picked_up";
    readonly EnrouteToDropoff: "enroute_to_dropoff";
    readonly ArrivedAtDropoff: "arrived_at_dropoff";
    readonly Delivered: "delivered";
    readonly EnrouteToReturn: "enroute_to_return";
    readonly ArrivedAtReturn: "arrived_at_return";
    readonly Returned: "returned";
    readonly Cancelled: "cancelled";
};
export type DeliveryResponseDeliveryStatusEnum = typeof DeliveryResponseDeliveryStatusEnum[keyof typeof DeliveryResponseDeliveryStatusEnum];
export declare const DeliveryResponseCancellationReasonEnum: {
    readonly CancelledByCreator: "cancelled_by_creator";
    readonly FailedToProcessPayment: "failed_to_process_payment";
    readonly FailedToAssignAndRefunded: "failed_to_assign_and_refunded";
    readonly FailedToPickup: "failed_to_pickup";
    readonly FailedToDeliver: "failed_to_deliver";
    readonly FailedToReturn: "failed_to_return";
};
export type DeliveryResponseCancellationReasonEnum = typeof DeliveryResponseCancellationReasonEnum[keyof typeof DeliveryResponseCancellationReasonEnum];
/**
 * The subtotal for all items in the order, excluding tax/tip. Use cents or the equivalent lowest currency denomination (e.g. $19.99 = 1999).
 * @export
 * @interface DeliveryValueDetails
 */
export interface DeliveryValueDetails {
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryValueDetails
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryValueDetails
     */
    'currency'?: string;
}
/**
 * Delivery value input details.
 * @export
 * @interface DeliveryValueInputDetails
 */
export interface DeliveryValueInputDetails {
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryValueInputDetails
     */
    'order_value'?: number;
}
/**
 * [Pre-release field: submit a ticket in the Developer Portal or reach out to your DoorDash contact if you would like to provide precise location information.] The precise location, as latitude and longitude, of the drop-off. If your request includes both location and address, location will be used for Dasher navigation only; address will be used for fee and serviceability checks.
 * @export
 * @interface DropoffLocation
 */
export interface DropoffLocation {
    /**
     * Latitude of the location
     * @type {number}
     * @memberof DropoffLocation
     */
    'lat': number;
    /**
     * Longitude of the location
     * @type {number}
     * @memberof DropoffLocation
     */
    'lng': number;
}
/**
 * Error returned when delivery creation request is duplicate and has a delivery already created for it.
 * @export
 * @interface DuplicateDeliveryIdError
 */
export interface DuplicateDeliveryIdError {
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'code': DuplicateDeliveryIdErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'message': string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'external_delivery_id': string;
}
export declare const DuplicateDeliveryIdErrorCodeEnum: {
    readonly DuplicateDeliveryId: "duplicate_delivery_id";
};
export type DuplicateDeliveryIdErrorCodeEnum = typeof DuplicateDeliveryIdErrorCodeEnum[keyof typeof DuplicateDeliveryIdErrorCodeEnum];
/**
 * Breakdown of the fee that was charged for this delivery; sums to `fee`.
 * @export
 * @interface FeeComponent
 */
export interface FeeComponent {
    /**
     * Name of the fee component.
     * @type {string}
     * @memberof FeeComponent
     */
    'type': FeeComponentTypeEnum;
    /**
     * Amount of the fee component in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof FeeComponent
     */
    'amount': number;
}
export declare const FeeComponentTypeEnum: {
    readonly DriveFeeComponentTypeUnspecified: "drive_fee_component_type_unspecified";
    readonly DistanceBasedFee: "distance_based_fee";
    readonly OrderValueBasedFee: "order_value_based_fee";
    readonly ServiceFee: "service_fee";
    readonly MxSubsidy: "mx_subsidy";
    readonly Other: "other";
    readonly DasherRegulatoryFee: "dasher_regulatory_fee";
    readonly Promotion: "promotion";
    readonly SmallOrderFee: "small_order_fee";
    readonly FlatFee: "flat_fee";
    readonly DwtFee: "dwt_fee";
    readonly Unrecognized: "unrecognized";
};
export type FeeComponentTypeEnum = typeof FeeComponentTypeEnum[keyof typeof FeeComponentTypeEnum];
/**
 * A field whose value couldn\'t be validated.
 * @export
 * @interface FieldError
 */
export interface FieldError {
    /**
     * Name of the field whose value couldn\'t be validated.
     * @type {string}
     * @memberof FieldError
     */
    'field': string;
    /**
     * The error that was encountered when validating the field\'s value.
     * @type {string}
     * @memberof FieldError
     */
    'error': string;
}
/**
 *
 * @export
 * @interface InvalidDeliveryError
 */
export interface InvalidDeliveryError {
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'code': InvalidDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'reason': InvalidDeliveryErrorReasonEnum;
}
export declare const InvalidDeliveryErrorCodeEnum: {
    readonly InvalidDeliveryParameters: "invalid_delivery_parameters";
};
export type InvalidDeliveryErrorCodeEnum = typeof InvalidDeliveryErrorCodeEnum[keyof typeof InvalidDeliveryErrorCodeEnum];
export declare const InvalidDeliveryErrorReasonEnum: {
    readonly DistanceTooLong: "distance_too_long";
    readonly PickupAddressNotInCoverage: "pickup_address_not_in_coverage";
    readonly DeliveryAddressNotInCoverage: "delivery_address_not_in_coverage";
    readonly OutsideOfDeliveryTime: "outside_of_delivery_time";
};
export type InvalidDeliveryErrorReasonEnum = typeof InvalidDeliveryErrorReasonEnum[keyof typeof InvalidDeliveryErrorReasonEnum];
/**
 * Near-real-time location of the Dasher.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Latitude of the location.
     * @type {number}
     * @memberof Location
     */
    'lat': number;
    /**
     * Longitude of the location.
     * @type {number}
     * @memberof Location
     */
    'lng': number;
}
/**
 * An object that specifies the restricted item(s) contained in this order.
 * @export
 * @interface OrderContains
 */
export interface OrderContains {
    /**
     * Flag to specify if the delivery contains alcohol.
     * @type {boolean}
     * @memberof OrderContains
     */
    'alcohol'?: boolean;
}
/**
 * Type of fulfillment required for the Delivery
 * @export
 * @enum {string}
 */
export declare const OrderFulfillmentMethod: {
    readonly Standard: "standard";
    readonly Catering: "catering";
    readonly ShopStage: "shop_stage";
    readonly ShopDeliver: "shop_deliver";
    readonly Parcel: "parcel";
};
export type OrderFulfillmentMethod = typeof OrderFulfillmentMethod[keyof typeof OrderFulfillmentMethod];
/**
 * Internal service failure, please try again later.
 * @export
 * @interface ServerFault
 */
export interface ServerFault {
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    'code': ServerFaultCodeEnum;
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    'message': string;
}
export declare const ServerFaultCodeEnum: {
    readonly ServiceFault: "service_fault";
};
export type ServerFaultCodeEnum = typeof ServerFaultCodeEnum[keyof typeof ServerFaultCodeEnum];
/**
 * Breakdown of the taxes that were charged for this delivery; sums to `tax`. Only returned for deliveries in Canada.
 * @export
 * @interface TaxComponent
 */
export interface TaxComponent {
    /**
     * Name of the tax component.
     * @type {string}
     * @memberof TaxComponent
     */
    'type': TaxComponentTypeEnum;
    /**
     * Amount of the tax component in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof TaxComponent
     */
    'amount': number;
}
export declare const TaxComponentTypeEnum: {
    readonly TaxTypeUnspecified: "tax_type_unspecified";
    readonly GstHst: "gst_hst";
    readonly Qst: "qst";
    readonly Pst: "pst";
    readonly Unrecognized: "unrecognized";
};
export type TaxComponentTypeEnum = typeof TaxComponentTypeEnum[keyof typeof TaxComponentTypeEnum];
/**
 * The UTC date-time (in ISO-8601 format) overrides dropoff_time and pickup_time when all four parameters of the time window (pickup_window_start_time , pickup_window_end_time , dropoff_window_start_time , dropoff_window_end_time) are provided.
 * @export
 * @interface TimeWindow
 */
export interface TimeWindow {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    'start_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    'end_time'?: string;
}
/**
 * External delivery ID was not found.
 * @export
 * @interface UnknownDeliveryError
 */
export interface UnknownDeliveryError {
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'code': UnknownDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'message': string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'external_delivery_id': string;
}
export declare const UnknownDeliveryErrorCodeEnum: {
    readonly UnknownDeliveryId: "unknown_delivery_id";
};
export type UnknownDeliveryErrorCodeEnum = typeof UnknownDeliveryErrorCodeEnum[keyof typeof UnknownDeliveryErrorCodeEnum];
/**
 *
 * @export
 * @interface UpdateDeliveryInput
 */
export interface UpdateDeliveryInput {
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. The Google [libphonenumber](https://github.com/google/libphonenumber) library is used to validate phone number.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof UpdateDeliveryInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof UpdateDeliveryInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof UpdateDeliveryInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'order_value'?: number;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof UpdateDeliveryInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_window'?: TimeWindow;
}
/**
 *
 * @export
 * @interface UpdateNotAllowedError
 */
export interface UpdateNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'code': UpdateNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'reason': UpdateNotAllowedErrorReasonEnum;
}
export declare const UpdateNotAllowedErrorCodeEnum: {
    readonly UpdateNotAllowed: "update_not_allowed";
};
export type UpdateNotAllowedErrorCodeEnum = typeof UpdateNotAllowedErrorCodeEnum[keyof typeof UpdateNotAllowedErrorCodeEnum];
export declare const UpdateNotAllowedErrorReasonEnum: {
    readonly DeliveryCancelled: "delivery_cancelled";
    readonly DeliveryCompleted: "delivery_completed";
    readonly DeliveryCreationInProgress: "delivery_creation_in_progress";
    readonly DeliveryPickedUp: "delivery_picked_up";
    readonly DeliveryAbandoned: "delivery_abandoned";
    readonly UpdateWindowClosed: "update_window_closed";
};
export type UpdateNotAllowedErrorReasonEnum = typeof UpdateNotAllowedErrorReasonEnum[keyof typeof UpdateNotAllowedErrorReasonEnum];
/**
 * One or more request values couldn\'t be validated.
 * @export
 * @interface ValidationFieldError
 */
export interface ValidationFieldError {
    /**
     *
     * @type {string}
     * @memberof ValidationFieldError
     */
    'code': ValidationFieldErrorCodeEnum;
    /**
     * One or more request values couldn\'t be validated.
     * @type {string}
     * @memberof ValidationFieldError
     */
    'message': string;
    /**
     * The list of fields whose values couldn\'t be validated.
     * @type {Array<FieldError>}
     * @memberof ValidationFieldError
     */
    'field_errors': Array<FieldError>;
}
export declare const ValidationFieldErrorCodeEnum: {
    readonly ValidationError: "validation_error";
};
export type ValidationFieldErrorCodeEnum = typeof ValidationFieldErrorCodeEnum[keyof typeof ValidationFieldErrorCodeEnum];
/**
 * DeliveryApi - axios parameter creator
 * @export
 */
export declare const DeliveryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery: (externalDeliveryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery: (createDeliveryInput: CreateDeliveryInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote: (deliveryQuoteInput: DeliveryQuoteInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept: (externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery: (externalDeliveryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery: (externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeliveryApi - functional programming interface
 * @export
 */
export declare const DeliveryApiFp: (configuration?: Configuration) => {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
};
/**
 * DeliveryApi - factory interface
 * @export
 */
export declare const DeliveryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: any): AxiosPromise<DeliveryResponse>;
};
/**
 * DeliveryApi - object-oriented interface
 * @export
 * @class DeliveryApi
 * @extends {BaseAPI}
 */
export declare class DeliveryApi extends BaseAPI {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    cancelDelivery(externalDeliveryId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    getDelivery(externalDeliveryId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
}
