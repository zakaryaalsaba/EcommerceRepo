"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Drive API
 * Last updated: April 25, 2023  ### Release Notes  ### 2.0.1 2023/04/25 - Removed URL Markdown in patterns (not supported)  - Updated numerous descriptions  ### 2.0.0 2023/04/25 - Updated numerous descriptions - Reset version to 2.0.0  ### 0.3.3 2023/04/21 - Remove currency field from quote, create and update delivery request in Drive v2  ### 0.3.2 2023/04/12 - Support barcode in Drive v2   ### 0.3.1 2023/04/11 - Updated numerous descriptions   ### 0.3.0 2023/3/02 - Support fee and tax breakdown in Drive v2  ### 0.2.6 2023/1/20 - Support cash on delivery in Drive v2  ### 0.2.5 2023/1/10 - Support promotion ids in Drive v2  ### 0.2.4 2022/10/12 - Support items   ### 0.2.3 2022/10/12 - Support dasher allowed vehicles   ### 0.2.2 2022/08/15 - Support alcohol delivery in drive v2  ### 0.2.1 2022/06/06 - Adding pickup external store and external business ID  ### 0.2.0 2022/04/11 - Support returnable delivery  ### 0.1.4 2022/04/05 - Add dropoff contact given name - Add dropoff contact family name - Add dropoff contact send sms notifications  ### 0.1.3 2022/04/05 - Add pickup verification image url - Add dropoff verification image url  ### 0.1.2 2022/01/27 - Properly marking all required fields  ### 0.1.1 2022/01/13 - Updated contactless flag name - Added parameters to support scheduled deliveries - remove scheduling model  ### 0.0.15 2021/12/07 - addded locale  ### 0.0.14 12/03/2021 - Added driver_reference_tag  ### 0.0.13 (internal release) 2021/11/24 - Added contactless flag - Added tip support - Updated cancellation failure reasons  ### 0.0.12 (internal release) 2021/11/09 - removed tracking url/support reference from input - addded explicit \"delivery outputs\" class  ### 0.0.11 (internal release) 2021/11/05 - added authorization errors  ### 0.0.10 (internal release) 2021/11/01 - external ID is no longer UUID - add support ID to delivery response - add tracking URL for delivery tracking  ### 0.0.9 (internal release) 2021/10/18 - move scheduling_model into it\'s own subtype  ### 0.0.8 (internal release) 2021/10/16 - converted all operations models into types with `allOf` to mixin values - converted all operations parameters to types  ### 0.0.7 (internal release) 2021/10/15 - removed _cents suffix for i18n coolness - removed dropoff/pickup locations from all APIs for now - All addresses are just one string, not nested - Created UUID type - Added optional pickup_business_name/dropoff_business_name  ### 0.0.6 (internal release) 2021/10/14 - rename estimates to quote - add accept quote endpoint - match create and quote input and response  ### 0.0.5 (internal release) 2021/10/12 - order_value_cents is now optional - removed tips - switch to full addresses instead of address_map {city, zipcode etc) - addded optional place name to address field  ### 0.0.4 (internal release) 2021/10/04 - update the estimate & create to have consistent input  ### 0.0.3 (internal release) - combined pickup / dropoff details into Objective type - added optional Location to pickup/dropoff - added new SchedulingModel type (ASAP only for now) to explicitly set scheduling logic  ### 0.0.2 (internal release) - updated statuses logic and enums  ### 0.0.1 (internal release) - initial version
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryApi = exports.DeliveryApiFactory = exports.DeliveryApiFp = exports.DeliveryApiAxiosParamCreator = exports.ValidationFieldErrorCodeEnum = exports.UpdateNotAllowedErrorReasonEnum = exports.UpdateNotAllowedErrorCodeEnum = exports.UnknownDeliveryErrorCodeEnum = exports.TaxComponentTypeEnum = exports.ServerFaultCodeEnum = exports.OrderFulfillmentMethod = exports.InvalidDeliveryErrorReasonEnum = exports.InvalidDeliveryErrorCodeEnum = exports.FeeComponentTypeEnum = exports.DuplicateDeliveryIdErrorCodeEnum = exports.DeliveryResponseCancellationReasonEnum = exports.DeliveryResponseDeliveryStatusEnum = exports.DeliveryOutputCancellationReasonEnum = exports.DeliveryOutputDeliveryStatusEnum = exports.DasherVehicleType = exports.CancelNotAllowedErrorReasonEnum = exports.CancelNotAllowedErrorCodeEnum = exports.AuthorizationErrorCodeEnum = exports.ActionIfUndeliverable = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * What the Dasher should do if the delivery is undeliverable. The default is \"dispose\". See [Create return to pickup deliveries](https://developer.doordash.com/en-US/docs/drive/how_to/return_to_pickup/) for more information.
 * @export
 * @enum {string}
 */
exports.ActionIfUndeliverable = {
    ReturnToPickup: 'return_to_pickup',
    Dispose: 'dispose'
};
exports.AuthorizationErrorCodeEnum = {
    AuthorizationError: 'authorization_error'
};
exports.CancelNotAllowedErrorCodeEnum = {
    CancelNotAllowed: 'cancel_not_allowed'
};
exports.CancelNotAllowedErrorReasonEnum = {
    DeliveryAbandoned: 'delivery_abandoned',
    DeliveryCancelled: 'delivery_cancelled',
    DeliveryCompleted: 'delivery_completed',
    DeliveryCreationInProgress: 'delivery_creation_in_progress',
    DeliveryPickedUp: 'delivery_picked_up',
    CancellationWindowClosed: 'cancellation_window_closed',
    DuplicateRequest: 'duplicate_request'
};
/**
 * Enum to specify vehicle type.
 * @export
 * @enum {string}
 */
exports.DasherVehicleType = {
    Car: 'car',
    Bicycle: 'bicycle',
    Walking: 'walking'
};
exports.DeliveryOutputDeliveryStatusEnum = {
    Quote: 'quote',
    Created: 'created',
    Confirmed: 'confirmed',
    EnrouteToPickup: 'enroute_to_pickup',
    ArrivedAtPickup: 'arrived_at_pickup',
    PickedUp: 'picked_up',
    EnrouteToDropoff: 'enroute_to_dropoff',
    ArrivedAtDropoff: 'arrived_at_dropoff',
    Delivered: 'delivered',
    EnrouteToReturn: 'enroute_to_return',
    ArrivedAtReturn: 'arrived_at_return',
    Returned: 'returned',
    Cancelled: 'cancelled'
};
exports.DeliveryOutputCancellationReasonEnum = {
    CancelledByCreator: 'cancelled_by_creator',
    FailedToProcessPayment: 'failed_to_process_payment',
    FailedToAssignAndRefunded: 'failed_to_assign_and_refunded',
    FailedToPickup: 'failed_to_pickup',
    FailedToDeliver: 'failed_to_deliver',
    FailedToReturn: 'failed_to_return'
};
exports.DeliveryResponseDeliveryStatusEnum = {
    Quote: 'quote',
    Created: 'created',
    Confirmed: 'confirmed',
    EnrouteToPickup: 'enroute_to_pickup',
    ArrivedAtPickup: 'arrived_at_pickup',
    PickedUp: 'picked_up',
    EnrouteToDropoff: 'enroute_to_dropoff',
    ArrivedAtDropoff: 'arrived_at_dropoff',
    Delivered: 'delivered',
    EnrouteToReturn: 'enroute_to_return',
    ArrivedAtReturn: 'arrived_at_return',
    Returned: 'returned',
    Cancelled: 'cancelled'
};
exports.DeliveryResponseCancellationReasonEnum = {
    CancelledByCreator: 'cancelled_by_creator',
    FailedToProcessPayment: 'failed_to_process_payment',
    FailedToAssignAndRefunded: 'failed_to_assign_and_refunded',
    FailedToPickup: 'failed_to_pickup',
    FailedToDeliver: 'failed_to_deliver',
    FailedToReturn: 'failed_to_return'
};
exports.DuplicateDeliveryIdErrorCodeEnum = {
    DuplicateDeliveryId: 'duplicate_delivery_id'
};
exports.FeeComponentTypeEnum = {
    DriveFeeComponentTypeUnspecified: 'drive_fee_component_type_unspecified',
    DistanceBasedFee: 'distance_based_fee',
    OrderValueBasedFee: 'order_value_based_fee',
    ServiceFee: 'service_fee',
    MxSubsidy: 'mx_subsidy',
    Other: 'other',
    DasherRegulatoryFee: 'dasher_regulatory_fee',
    Promotion: 'promotion',
    SmallOrderFee: 'small_order_fee',
    FlatFee: 'flat_fee',
    DwtFee: 'dwt_fee',
    Unrecognized: 'unrecognized'
};
exports.InvalidDeliveryErrorCodeEnum = {
    InvalidDeliveryParameters: 'invalid_delivery_parameters'
};
exports.InvalidDeliveryErrorReasonEnum = {
    DistanceTooLong: 'distance_too_long',
    PickupAddressNotInCoverage: 'pickup_address_not_in_coverage',
    DeliveryAddressNotInCoverage: 'delivery_address_not_in_coverage',
    OutsideOfDeliveryTime: 'outside_of_delivery_time'
};
/**
 * Type of fulfillment required for the Delivery
 * @export
 * @enum {string}
 */
exports.OrderFulfillmentMethod = {
    Standard: 'standard',
    Catering: 'catering',
    ShopStage: 'shop_stage',
    ShopDeliver: 'shop_deliver',
    Parcel: 'parcel'
};
exports.ServerFaultCodeEnum = {
    ServiceFault: 'service_fault'
};
exports.TaxComponentTypeEnum = {
    TaxTypeUnspecified: 'tax_type_unspecified',
    GstHst: 'gst_hst',
    Qst: 'qst',
    Pst: 'pst',
    Unrecognized: 'unrecognized'
};
exports.UnknownDeliveryErrorCodeEnum = {
    UnknownDeliveryId: 'unknown_delivery_id'
};
exports.UpdateNotAllowedErrorCodeEnum = {
    UpdateNotAllowed: 'update_not_allowed'
};
exports.UpdateNotAllowedErrorReasonEnum = {
    DeliveryCancelled: 'delivery_cancelled',
    DeliveryCompleted: 'delivery_completed',
    DeliveryCreationInProgress: 'delivery_creation_in_progress',
    DeliveryPickedUp: 'delivery_picked_up',
    DeliveryAbandoned: 'delivery_abandoned',
    UpdateWindowClosed: 'update_window_closed'
};
exports.ValidationFieldErrorCodeEnum = {
    ValidationError: 'validation_error'
};
/**
 * DeliveryApi - axios parameter creator
 * @export
 */
const DeliveryApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
         * @summary Cancel Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelDelivery: async (externalDeliveryId, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('cancelDelivery', 'externalDeliveryId', externalDeliveryId);
            const localVarPath = `/drive/v2/deliveries/{external_delivery_id}/cancel`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
         * @summary Create Delivery
         * @param {CreateDeliveryInput} createDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDelivery: async (createDeliveryInput, options = {}) => {
            // verify required parameter 'createDeliveryInput' is not null or undefined
            (0, common_1.assertParamExists)('createDelivery', 'createDeliveryInput', createDeliveryInput);
            const localVarPath = `/drive/v2/deliveries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createDeliveryInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
         * @summary Create Quote
         * @param {DeliveryQuoteInput} deliveryQuoteInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuote: async (deliveryQuoteInput, options = {}) => {
            // verify required parameter 'deliveryQuoteInput' is not null or undefined
            (0, common_1.assertParamExists)('deliveryQuote', 'deliveryQuoteInput', deliveryQuoteInput);
            const localVarPath = `/drive/v2/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deliveryQuoteInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
         * @summary Accept Quote
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuoteAccept: async (externalDeliveryId, deliveryQuoteAcceptInput, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('deliveryQuoteAccept', 'externalDeliveryId', externalDeliveryId);
            const localVarPath = `/drive/v2/quotes/{external_delivery_id}/accept`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deliveryQuoteAcceptInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
         * @summary Get Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelivery: async (externalDeliveryId, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('getDelivery', 'externalDeliveryId', externalDeliveryId);
            const localVarPath = `/drive/v2/deliveries/{external_delivery_id}`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
         * @summary Update Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {UpdateDeliveryInput} updateDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelivery: async (externalDeliveryId, updateDeliveryInput, options = {}) => {
            // verify required parameter 'externalDeliveryId' is not null or undefined
            (0, common_1.assertParamExists)('updateDelivery', 'externalDeliveryId', externalDeliveryId);
            // verify required parameter 'updateDeliveryInput' is not null or undefined
            (0, common_1.assertParamExists)('updateDelivery', 'updateDeliveryInput', updateDeliveryInput);
            const localVarPath = `/drive/v2/deliveries/{external_delivery_id}`
                .replace(`{${"external_delivery_id"}}`, encodeURIComponent(String(externalDeliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateDeliveryInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DeliveryApiAxiosParamCreator = DeliveryApiAxiosParamCreator;
/**
 * DeliveryApi - functional programming interface
 * @export
 */
const DeliveryApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DeliveryApiAxiosParamCreator)(configuration);
    return {
        /**
         * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
         * @summary Cancel Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelDelivery(externalDeliveryId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelDelivery(externalDeliveryId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
         * @summary Create Delivery
         * @param {CreateDeliveryInput} createDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDelivery(createDeliveryInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDelivery(createDeliveryInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
         * @summary Create Quote
         * @param {DeliveryQuoteInput} deliveryQuoteInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryQuote(deliveryQuoteInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryQuote(deliveryQuoteInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
         * @summary Accept Quote
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryQuoteAccept(externalDeliveryId, deliveryQuoteAcceptInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryQuoteAccept(externalDeliveryId, deliveryQuoteAcceptInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
         * @summary Get Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDelivery(externalDeliveryId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDelivery(externalDeliveryId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
         * @summary Update Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {UpdateDeliveryInput} updateDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDelivery(externalDeliveryId, updateDeliveryInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDelivery(externalDeliveryId, updateDeliveryInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DeliveryApiFp = DeliveryApiFp;
/**
 * DeliveryApi - factory interface
 * @export
 */
const DeliveryApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DeliveryApiFp)(configuration);
    return {
        /**
         * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
         * @summary Cancel Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelDelivery(externalDeliveryId, options) {
            return localVarFp.cancelDelivery(externalDeliveryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
         * @summary Create Delivery
         * @param {CreateDeliveryInput} createDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDelivery(createDeliveryInput, options) {
            return localVarFp.createDelivery(createDeliveryInput, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
         * @summary Create Quote
         * @param {DeliveryQuoteInput} deliveryQuoteInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuote(deliveryQuoteInput, options) {
            return localVarFp.deliveryQuote(deliveryQuoteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
         * @summary Accept Quote
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryQuoteAccept(externalDeliveryId, deliveryQuoteAcceptInput, options) {
            return localVarFp.deliveryQuoteAccept(externalDeliveryId, deliveryQuoteAcceptInput, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
         * @summary Get Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDelivery(externalDeliveryId, options) {
            return localVarFp.getDelivery(externalDeliveryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
         * @summary Update Delivery
         * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
         * @param {UpdateDeliveryInput} updateDeliveryInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelivery(externalDeliveryId, updateDeliveryInput, options) {
            return localVarFp.updateDelivery(externalDeliveryId, updateDeliveryInput, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DeliveryApiFactory = DeliveryApiFactory;
/**
 * DeliveryApi - object-oriented interface
 * @export
 * @class DeliveryApi
 * @extends {BaseAPI}
 */
class DeliveryApi extends base_1.BaseAPI {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    cancelDelivery(externalDeliveryId, options) {
        return (0, exports.DeliveryApiFp)(this.configuration).cancelDelivery(externalDeliveryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    createDelivery(createDeliveryInput, options) {
        return (0, exports.DeliveryApiFp)(this.configuration).createDelivery(createDeliveryInput, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    deliveryQuote(deliveryQuoteInput, options) {
        return (0, exports.DeliveryApiFp)(this.configuration).deliveryQuote(deliveryQuoteInput, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    deliveryQuoteAccept(externalDeliveryId, deliveryQuoteAcceptInput, options) {
        return (0, exports.DeliveryApiFp)(this.configuration).deliveryQuoteAccept(externalDeliveryId, deliveryQuoteAcceptInput, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    getDelivery(externalDeliveryId, options) {
        return (0, exports.DeliveryApiFp)(this.configuration).getDelivery(externalDeliveryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    updateDelivery(externalDeliveryId, updateDeliveryInput, options) {
        return (0, exports.DeliveryApiFp)(this.configuration).updateDelivery(externalDeliveryId, updateDeliveryInput, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DeliveryApi = DeliveryApi;
//# sourceMappingURL=api.js.map